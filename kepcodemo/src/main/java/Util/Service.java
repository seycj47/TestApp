package Util;

import com.pentasecurity.cpo.mo.MoAdapter;
import com.pentasecurity.cpo.mo.V2gAdapter;
import com.pentasecurity.cpo.mo.model.*;
import com.pentasecurity.cpo.mo.util.Json;
import message.*;
import models.IssueTlsCertRequest;
import ocsp.OcspReqClient;
import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.interfaces.ECPublicKey;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;
import org.bouncycastle.jce.spec.ECPublicKeySpec;
import org.bouncycastle.math.ec.ECPoint;

import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.xml.bind.JAXBElement;
import java.math.BigInteger;
import java.security.*;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.*;

public class Service {

    final String PASSPHRASE_FOR_CERTIFICATES_AND_KEYS = "Autocrypt123!";
    final String ALIAS_PFX_PRIVATEKEY = "PFXCertificate";

    private CertFactory certFactory;
    private CryptFactory cryptFactory;
    private V2gAdapter v2g;
    private MoAdapter mo;


    String moSubca2 = "MIICZzCCAg2gAwIBAgIBEDAKBggqhkjOPQQDAjBAMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMREwDwYDVQQDDAhNT1N1YkNhMTAeFw0yMDAxMDcwNDM2MTFaFw0yMTAxMDcwNDM2MTFaMEAxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExETAPBgNVBAMMCE1PU3ViQ2EyMEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEENVVvW1t+pu5Pi/9b+AJdec6+fOTxtqPL5jl6dGv0KDm33H3w1/6lPD6bmZ/VXUyo4IBBjCCAQIwHQYDVR0OBBYEFARdB2r/M1iBoQioSYnxv9MD4gQOMGYGA1UdIwRfMF2AFKjVNfFgJ7bJUFXN6gDrFhVvSY4/oUKkQDA+MQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMQ8wDQYDVQQDDAZNT1Jvb3SCAQ8wDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQAwVQYDVR0fBE4wTDBKoEigRoZEaHR0cDovLzEyNy4wLjAuMS9jbj1vNmJEMUVxWFR0dWFHU2Q2QXVTQkVBLG91PXBlbnRhLG89cGVudGEsYz1LUi5hcmwwCgYIKoZIzj0EAwIDSAAwRQIgd5qu8ocHvptJ76S6LRPedwtOj0ht8jVZ8ZKfNJtlTA0CIQCnD3wlrSTBYjffoj4nfskMYc7HdipZQMZnavAkcdkIHA==";

    private String pcid = "test_pcid10";
    private String oemCert = "MIICqjCCAk+gAwIBAgIGAOjUpRBrMAoGCCqGSM49BAMCMEExCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExEjAQBgNVBAMMCU9lbVN1YkNhMjAeFw0yMDAxMTcwMDAwMDBaFw0zMDAxMTcyMzU5NTlaMEMxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExFDASBgNVBAMMC3Rlc3RfcGNpZDEwMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEjECS0GyLNS4aD+tgLFEZ3BN+DGUk3lgxk+Kroa4ehTEv4F5nQtlQfz07wW00f7F1CsXlp0guELMjgW84uXZMQaOCAS8wggErMGkGA1UdIwRiMGCAFKVNKkszWu4fudcrFzMGELxxVcaeoUWkQzBBMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMRIwEAYDVQQDDAlPRU1TdWJDYTGCAQswHQYDVR0OBBYEFP7ttGduNn1wbzB0rw2AbXkJJw7kMA4GA1UdDwEB/wQEAwID6DBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vMTI3LjAuMC4xL2NuPWRwX2U3TDJuby1sUTA2dTJKLVBVLTY1a1FwMCxvdT1wZW50YSxvPXBlbnRhLGM9S1IuY3JsMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovLzUyLjIzMS41NS44OjkwOTIwCgYIKoZIzj0EAwIDSQAwRgIhAMhcAkOEzNQY5zm3wwDqUgkm9andc36+k68vmko8WOqEAiEA8/JldokPHSOIHjm0IPQ4RWHmLR8xaIU1wckiBvPIwyA=";
    private String oemPfxCert = "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";

    private String v2gRootDN = "cn=V2GRootCert,ou=penta,o=penta,c=KR";
    private BigInteger v2gSerial = BigInteger.valueOf(4);
    private String sessionID = "355E336113C0BE9D";

    String cloudServerIp = "52.231.55.8";
    String url_OCSP = "http://"+cloudServerIp+":9091/OCSPServer";


    private String instResMsg = null;
    private String updtResMsg = null;
    private String contractCert = null;
    private String emaid = null;


    public Service(Properties properties) {
        try {

//            this.v2gRootDN = properties.getProperty("v2gRootDN");
//            this.v2gSerial = BigInteger.valueOf(Long.parproperties.getProperty("v2gSerial"))

            this.mo = new MoAdapter("52.231.55.8", "80");
            this.v2g = new V2gAdapter("52.231.55.8", "8000");
            this.certFactory = new CertFactory();
            this.cryptFactory = new CryptFactory();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

//    public Service() {
//        try {
//            this.mo = new MoAdapter("52.231.55.8", "80");
//            this.v2g = new V2gAdapter("localhost", "8080");
////            this.v2g = new V2gAdapter("52.231.55.8", "8000");
//            this.certFactory = new CertFactory();
//            this.cryptFactory = new CryptFactory();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }

    public V2GMessage createCertUpdateReq2(String updtResMsg) throws Exception {
        String decodedMsg = ExiFactory.getInstance().decodeEXI(updtResMsg, false, false);
        V2GMessage resV2gMsg = (V2GMessage) MsgDigest.unmarshallToMessage(decodedMsg.getBytes(), V2GMessage.class);

        JAXBElement<CertificateUpdateResType> certUpdtRes = (JAXBElement<CertificateUpdateResType>) resV2gMsg.getBody().getBodyElement();

        //. Create CertificateInstallationReq
        X509IssuerSerialType x509IssuerSerial = new X509IssuerSerialType();
        x509IssuerSerial.setX509IssuerName(v2gRootDN);
        x509IssuerSerial.setX509SerialNumber(v2gSerial);

        List<X509IssuerSerialType> rootCertificateIDs = Arrays.asList(x509IssuerSerial); // new ArrayList<>();

//        CertificateInstallationReqType certInstReq = new CertificateInstallationReqType();

        CertificateChainType certChain = new CertificateChainType();
        certChain.setCertificate(certUpdtRes.getValue().getContractSignatureCertChain().getCertificate());
        SubCertificatesType subCertType = new SubCertificatesType();
        subCertType.setSubCertificate(certUpdtRes.getValue().getContractSignatureCertChain().getSubCertificates().getSubCertificate());
        certChain.setSubCertificates(subCertType);


        CertificateUpdateReqType certUpdtReq = new CertificateUpdateReqType();
        certUpdtReq.setId("ID1");
        certUpdtReq.setContractSignatureCertChain(certChain);
        certUpdtReq.setListOfRootCertificateIDs(new ListOfRootCertificateIDsType());
        certUpdtReq.getListOfRootCertificateIDs().setRootCertificateID(rootCertificateIDs);
        certUpdtReq.setEMAID(certUpdtRes.getValue().getEMAID().getValue());


        // signature 생성
        Map targetMap = new HashMap<Class<?>, Object>() {{
            put(CertificateUpdateReqType.class, certUpdtReq);
        }};


        //ING
        byte[] encryptedPriKeyBytes = certUpdtRes.getValue().getContractSignatureEncryptedPrivateKey().getValue();
        byte[] dhPubKeyBytes = certUpdtRes.getValue().getDHpublickey().getValue();

        KeyStore keystore = certFactory.getPKCS12KeyStore(oemPfxCert, PASSPHRASE_FOR_CERTIFICATES_AND_KEYS);

        java.security.interfaces.ECPrivateKey oemPrivKey = (java.security.interfaces.ECPrivateKey)keystore.getKey(ALIAS_PFX_PRIVATEKEY, "".toCharArray());


        KeyFactory keyFactory = KeyFactory.getInstance("EC", "BC");
        //CURVE_NAME e.g prime192v1
        ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec("secp256r1");

        //pub Decoding and create ECPubKey
        ECPoint point = ecSpec.getCurve().decodePoint(dhPubKeyBytes);
        ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);
        ECPublicKey dhPubKey = (ECPublicKey)keyFactory.generatePublic(pubSpec);

        //decrypt encrypted privKey
        byte[] secretKey = cryptFactory.generateSharedSecret(oemPrivKey, (ECPublicKey)dhPubKey);
        SecretKey sessionKey = cryptFactory.generateSessionKey(secretKey);
//        val randomIV = generateRandom(16)
        byte[] randomIV = new byte[16];
        System.arraycopy(encryptedPriKeyBytes, 0, randomIV, 0, 16);

        IvParameterSpec ivParamSpec = new IvParameterSpec(randomIV);
        byte[] realEncrypedPrivKey = new byte[32];
        System.arraycopy(encryptedPriKeyBytes, 16, realEncrypedPrivKey, 0, 32);

        byte[] decryptedPriv = cryptFactory.decrypt(realEncrypedPrivKey, sessionKey, ivParamSpec);

        // create ECPrivKey
        ECPrivateKeySpec privSpec = new ECPrivateKeySpec(new BigInteger(decryptedPriv), ecSpec);
        PrivateKey privateKey = keyFactory.generatePrivate(privSpec);


        SignatureType signature = new SignatureType();
        signature.setSignedInfo(createSignedInfo(targetMap));

        JAXBElement<SignedInfoType> signedInfoJAXB = ObjectFactory.createSignedInfoType(signature.getSignedInfo());


        // signature 생성
        signature.setSignatureValue(MsgDigest.signSignedInfoElement(signedInfoJAXB, (java.security.interfaces.ECPrivateKey)privateKey));


//        SignatureType signature = Common.createSignature(targetMap, oemPfxCert);

        // 3. V2G Message 생성
        V2gHeaderType v2gHeader = new V2gHeaderType();
        v2gHeader.setSessionId(sessionID);
        v2gHeader.setSignature(signature);
        BodyType bodyMsg = new BodyType();
        bodyMsg.setBodyElement(ObjectFactory.createCertificateUpdateReq(certUpdtReq));
        V2GMessage v2gMsg = new V2GMessage();
        v2gMsg.setHeader(v2gHeader);
        v2gMsg.setBody(bodyMsg);

        return v2gMsg;
    }
    public V2GMessage createCertUpdateReq(String instResMsg) throws Exception {

//        instResMsg = "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";
//        this.oemPfxCert = "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";
//        this.oemCert = "MIICqjCCAk+gAwIBAgIGAOjUpRBrMAoGCCqGSM49BAMCMEExCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExEjAQBgNVBAMMCU9lbVN1YkNhMjAeFw0yMDAxMTcwMDAwMDBaFw0zMDAxMTcyMzU5NTlaMEMxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExFDASBgNVBAMMC3Rlc3RfcGNpZDEwMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEjECS0GyLNS4aD+tgLFEZ3BN+DGUk3lgxk+Kroa4ehTEv4F5nQtlQfz07wW00f7F1CsXlp0guELMjgW84uXZMQaOCAS8wggErMGkGA1UdIwRiMGCAFKVNKkszWu4fudcrFzMGELxxVcaeoUWkQzBBMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMRIwEAYDVQQDDAlPRU1TdWJDYTGCAQswHQYDVR0OBBYEFP7ttGduNn1wbzB0rw2AbXkJJw7kMA4GA1UdDwEB/wQEAwID6DBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vMTI3LjAuMC4xL2NuPWRwX2U3TDJuby1sUTA2dTJKLVBVLTY1a1FwMCxvdT1wZW50YSxvPXBlbnRhLGM9S1IuY3JsMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovLzUyLjIzMS41NS44OjkwOTIwCgYIKoZIzj0EAwIDSQAwRgIhAMhcAkOEzNQY5zm3wwDqUgkm9andc36+k68vmko8WOqEAiEA8/JldokPHSOIHjm0IPQ4RWHmLR8xaIU1wckiBvPIwyA=";

        //됨
//        instResMsg = "gJhwGYRUStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJehq0Ojo4HReXu7u7lzuZlze5M5eZGBgYl5gaF7w2tjI5tLOWtre5MpGysbI5sJa5tDCZGpsiBiNpZDICVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0hS0Ojo4HReXu7u7lzuZlze5M5eZGBgYl5gaF7w2tjK3MZG5tDCZGpshAeEdJV/e34UYL+8hzijtBnnZQivXsnmjCMlWBESrFpegIGI2lkMQJWh0dHA6Ly93d3cudzMub3JnL1RSL2Nhbm9uaWNhbC1leGkvSFLQ6OjgdF5e7u7uXO5mXN7kzl5kYGBiXmBoXvDa2Mrcxkbm0MJkamyEGghRikDoRZjWzQ1OuxxhqqPhjmaKcb7+uS2NoEpVJlGAgYjaWQ0AlaHR0cDovL3d3dy53My5vcmcvVFIvY2Fub25pY2FsLWV4aS9IUtDo6OB0Xl7u7u5c7mZc3uTOXmRgYGJeYGhe8NrYytzGRubQwmRqbIQLLT6Crv5COe2oaxVtKEjcK/HjJTmOSQXRXX/GlgpW1uCBiNpZDMCVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0hS0Ojo4HReXu7u7lzuZlze5M5eZGBgYl5gaF7w2tjK3MZG5tDCZGpshBRoZlIkG+UlBnqw38O1rY7ZifHwfssa96K7FdcuRaDo4lA7rnPfcfJvGt59rzvbseZ/rI7w9t8wPWUP/2kEA03R6rgxFAi7eiGN/uV+oJ6ggkgNarZwXUKV9ulq38glUm8t0DABbAKYQQFqGEEBPdABgQCBAQMAdGpSiASYBQMEFUMkZx6CAYEYLpiRGBADAaqCAYYMqCWklpivoakqL6gpJ6svqaqhGS+rIKYkohiKmAmDAaqCBQYGOzK5NLmxt5AjtrEkGIWYBIMBqoIDCYEiIpiJmAiDBQTJE0TJ+RYyAIyLAaGoKZgPC4aYnJiYmBwYGBgYGBgtC4aZGJiYmBwZGZqcmpytGDiYhZgEgwGqggMJgSIimIqYCYMBqoIFBgY7Mrk0ubG3kCO2sSQYiRgIAwGqggWGBKC6ujexuTy4OhiJmAiDBQTJE0TJ+RYyAIyLAaGoKZiRGBADAaqCAYYMqCWklpivoakqL6gpJ6svpiKgoy+rIKYkohgsmAmDA5VDJGcegQCDBBVDJGcegYCDgaEAAgm7WJpgezQTWxv1ghdr5OPEpptK/I5bMaYRfld1rI25NZ/GKc09YsxkxMthkvhES18+iLEOVsGzYWMbeuXYkKFRwQCImEEAhphAwoMBqo6Rgj8YPkAKDy2I1tKj4oUB8AdAA3TgSa/ZZhLQsNIvmC6YkRgQAwGqggGGDKglpJaYr6GpKi+oKSerL6mqoRivqyCmJKIYipgJgwGqggUGBjsyuTS5sbeQI7axJBiFmASDAaqCAwmBIiKYiZgIgwUEyRNEyfkWMgCMiwGhqCnBAIuYDoMBqo6HAgsCCgP0B37MMc9oVotzc7d3Zl6EAGTymAcDAaqOh4CA/4ICAYEDwBgqAwGqjo+CJpglmCTQI9AiwyGxtx6yOC+ZNycpvSg2uSkbobEYurIyq6Q6pLqzuBgWN7qeoLq6N7G5PLg6FjeeuzK5NLmxt5AjtrEkFjGeoiKXMbk2GAUDBBVDJGceggGBAaOAGCIBEBkciqO0uv2jHEedpU9F8V6qdZG7w0opnZZigy69OX9zgRAXTZTc7763FalMvECT7JmJ2Gcaxd/M7ofdtH+IoqYONgPADMIIB7DCCAZOgAwIBAgIBFjAKBggqhkjOPQQDAjBcMSEwHwYDVQQDDBhQS0ktMV9DUlRfVjJHX1JPT1RfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEzARBgoJkiaJk/IsZAEZFgNWMkcwHhcNMTkxMDI5MTYzMTU1WhcNMjMxMDI4MTYzMTU1WjBdMSIwIAYDVQQDDBlQS0ktMV9DUlRfUFJPVl9TVUIxX1ZBTElEMRUwEwYDVQQKDAx2ZXJpc2NvIEdtYkgxCzAJBgNVBAYTAkRFMRMwEQYKCZImiZPyLGQBGRYDQ1BTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE40LV4eZOyyMf6XFMpOBp254uGgjHMaBuV0uB05OiClBO4LjfEYq7PsSBWrl5g6IPMg1LgBwT795DpVpgfQZ1LqNFMEMwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFHAINwcGkrEzu/CyEBkmogrKIQoUMAoGCCqGSM49BAMCA0cAMEQCIBJUN9Kr1THxcxmYkwUgqz6X484JevUDGQMV0iucl7JfAiBI9fIMvabocdnvt6W++5u8JKuEANrPWpThpS+LCUhNuQ8wMwggHvMIIBlKADAgECAgEXMAoGCCqGSM49BAMCMF0xIjAgBgNVBAMMGVBLSS0xX0NSVF9QUk9WX1NVQjFfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEzARBgoJkiaJk/IsZAEZFgNDUFMwHhcNMTkxMDI5MTYzMTU1WhcNMjExMDI4MTYzMTU1WjBdMSIwIAYDVQQDDBlQS0ktMV9DUlRfUFJPVl9TVUIyX1ZBTElEMRUwEwYDVQQKDAx2ZXJpc2NvIEdtYkgxCzAJBgNVBAYTAkRFMRMwEQYKCZImiZPyLGQBGRYDQ1BTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEPu7U5fn/I9m+3Bj4kp9jds/TSc/35pciurVR/OamN00znZG7fNrM1pBc6MurfNKPh6CFwoL0gq3G4Kwp7nYT+qNFMEMwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFB5bEa2lR8UKA+AOgAbpwJNfsswlMAoGCCqGSM49BAMCA0kAMEYCIQCZu1Iq9hLTeTMWJah5QBnw5WfRg6k7w9rd7Ys8eK9F9wIhALGfohTMSKh2OcwohIa8P8+MlgIad6D96DuQaCLV43VIIArSyGJigphBAWCYQQE0UAGBAIEBAwB0alKIUJgFAwQVQyRnHoIBgRgtGJAYDwMBqoIBhguoJaSWmK+hqSovpqevqaqhGS+rIKYkohiKmAmDAaqCBQYGOzK5NLmxt5AjtrEkGIWYBIMBqoIDCYEiIpiJGAgDBQTJE0TJ+RYyAIyLASanmA8LhpicmJkYmBgYGBgYGC0LhpkYmJkYmBkZmpyanK0YMhiFmASDAaqCAwmBIiKYipgJgwGqggUGBjsyuTS5sbeQI7axJBiJGAgDAaqCBYYEsLq6N7G5PLg6GIkYCAMFBMkTRMn5FjIAjIsBJqeYixgKAwGqggGGBpgZr6oiqaovoqagpKIYLJgJgwOVQyRnHoEAgwQVQyRnHoGAg4GhAAJlgfx55MHKShbjQVTlasA4j/Xn0P1cXkl/+sBFk07CYYavkAJzfjMve4djjSsf6ztW7o95MnEdLZdgCkRih1EO0cEAhxhBAIUYQMEDAaqOkYI9mDzACh15xm9vAm5OUPD77Rm0vANC4VKgUK9SLhgtGJAYDwMBqoIBhguoJaSWmK+hqSovpqevqaqhGK+rIKYkohiKmAmDAaqCBQYGOzK5NLmxt5AjtrEkGIWYBIMBqoIDCYEiIpiJGAgDBQTJE0TJ+RYyAIyLASanwQCGmA6DAaqOhwILAgpydAfSwP3ZgRCiSAElIrUjbP9xBRgHAwGqjoeAgP+CAgGBAfQYKgMBqo6PgiaYJZgk0CPQIsMhsbcesjgvqSqjO60nvDIqNCejprOxJ7M2KiQZs7gYFje6nrC6ujexuTy4OhY3nrsyuTS5sbeQI7axJBYxnqIilzG5NhgFAwQVQyRnHoIBgQGjgBgiARA5QvdOyzmm1gmWb3ieHYI5Pt0p0ouacd/Z8ku/m4+MzwEQJVWvc2LYURlLsZjXOTpYFGbPJY6zTwQPDQjJjgZXO9qDtAzCCAekwggGOoAMCAQICAQwwCgYIKoZIzj0EAwIwWjEgMB4GA1UEAwwXUEtJLTFfQ1JUX01PX1JPT1RfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEjAQBgoJkiaJk/IsZAEZFgJNTzAeFw0xOTEwMjkxNjMxNTRaFw0yMzEwMjgxNjMxNTRaMFoxIDAeBgNVBAMMF1BLSS0xX0NSVF9NT19TVUIxX1ZBTElEMRUwEwYDVQQKDAx2ZXJpc2NvIEdtYkgxCzAJBgNVBAYTAkRFMRIwEAYKCZImiZPyLGQBGRYCTU8wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATVOVYD3dJyDSvCdkN3+tQgW6t6WKSAUoX6VEH4vJlfVM5hpvvDfmJClJ2Uv3oL0Q5sLPBkM2X/o93hTpGBLMiNo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUOlBq6sJmLqT6mipZfKWlcOQwGz4wCgYIKoZIzj0EAwIDSQAwRgIhAMTAFBjaA22LtGiEqHnL2Vcz+aK7gFqh044qfdcBffz8AiEA3HiuC8KK9G9/Leo90/k/e4l4rgwFav/K+Jn9VH1Ww9AOwDMIIB6DCCAY6gAwIBAgIBDTAKBggqhkjOPQQDAjBaMSAwHgYDVQQDDBdQS0ktMV9DUlRfTU9fU1VCMV9WQUxJRDEVMBMGA1UECgwMdmVyaXNjbyBHbWJIMQswCQYDVQQGEwJERTESMBAGCgmSJomT8ixkARkWAk1PMB4XDTE5MTAyOTE2MzE1NFoXDTIzMTAyODE2MzE1NFowWjEgMB4GA1UEAwwXUEtJLTFfQ1JUX01PX1NVQjJfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEjAQBgoJkiaJk/IsZAEZFgJNTzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKU++1eAJ92ORDgu9nfXL7Ap7ZqzHoczKgmioefBTzpEklNihnADOY0MScd9jTd9z2QtCgkVEXQ40Nw1yQeh5DujRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgHGMB0GA1UdDgQWBBQ684ze3gTcnKHh99ozaXgGhcKlQDAKBggqhkjOPQQDAgNIADBFAiEAwTpyRDLK40Uqx9zFA589AIP2A9ZgLvu2WU2SykvA4HgCIH6KRZ6nTlr8jBfA9b/WlIr4nEmtHEUAE0KwWcc37sztIBWlkMhgNAub5vQzRQy+NjxNHIEg5BV2qaGaq2bsuaMqHYVu9AOucqE95j9UxkOplLy3/Qw8AVpZDMggmsFQ+bVEiCKV2qO+Yh2XjBI2PW1UMPMJMEjwVw9p0b49W4joCdOOUH++8tytPJhauLgtkcviBoN95tV5ZPOVfQAVpZDQHmBmvqiKpqi+ipqCkogA==";
//        this.oemPfxCert = "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";

        instResMsg = "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";
        this.oemPfxCert = "";


        String decodedMsg = ExiFactory.getInstance().decodeEXI(instResMsg, false, false);
        V2GMessage resV2gMsg = (V2GMessage) MsgDigest.unmarshallToMessage(decodedMsg.getBytes(), V2GMessage.class);

        JAXBElement<CertificateInstallationResType> certInstRes = (JAXBElement<CertificateInstallationResType>) resV2gMsg.getBody().getBodyElement();

        //. Create CertificateInstallationReq
        X509IssuerSerialType x509IssuerSerial = new X509IssuerSerialType();
        x509IssuerSerial.setX509IssuerName(v2gRootDN);
        x509IssuerSerial.setX509SerialNumber(v2gSerial);

        List<X509IssuerSerialType> rootCertificateIDs = Arrays.asList(x509IssuerSerial); // new ArrayList<>();


        byte[] contractCert = certInstRes.getValue().getContractSignatureCertChain().getCertificate();
        CertificateChainType certChain = new CertificateChainType();
        certChain.setCertificate(contractCert);
        SubCertificatesType subCertType = new SubCertificatesType();
        subCertType.setSubCertificate(certInstRes.getValue().getContractSignatureCertChain().getSubCertificates().getSubCertificate());
        certChain.setSubCertificates(subCertType);


        CertificateUpdateReqType certUpdtReq = new CertificateUpdateReqType();
        certUpdtReq.setId("ID1");
        certUpdtReq.setContractSignatureCertChain(certChain);
        certUpdtReq.setListOfRootCertificateIDs(new ListOfRootCertificateIDsType());
        certUpdtReq.getListOfRootCertificateIDs().setRootCertificateID(rootCertificateIDs);
        certUpdtReq.setEMAID(certInstRes.getValue().getEMAID().getValue());


        //ING
        byte[] encryptedPriKeyBytes = certInstRes.getValue().getContractSignatureEncryptedPrivateKey().getValue();
        byte[] dhPubKeyBytes = certInstRes.getValue().getDHpublickey().getValue();

        KeyStore keystore = certFactory.getPKCS12KeyStore(oemPfxCert, PASSPHRASE_FOR_CERTIFICATES_AND_KEYS);

        java.security.interfaces.ECPrivateKey oemPrivKey = (java.security.interfaces.ECPrivateKey)keystore.getKey(ALIAS_PFX_PRIVATEKEY, "".toCharArray());


        KeyFactory keyFactory = KeyFactory.getInstance("EC", "BC");
        //CURVE_NAME e.g prime192v1
        ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec("secp256r1");

        //pub Decoding and create ECPubKey
        ECPoint point = ecSpec.getCurve().decodePoint(dhPubKeyBytes);
        ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);
        ECPublicKey dhPubKey = (ECPublicKey)keyFactory.generatePublic(pubSpec);

        //decrypt encrypted privKey
        byte[] secretKey = cryptFactory.generateSharedSecret(oemPrivKey, (ECPublicKey)dhPubKey);
        SecretKey sessionKey = cryptFactory.generateSessionKey(secretKey);
        byte[] randomIV = new byte[16];
        System.arraycopy(encryptedPriKeyBytes, 0, randomIV, 0, 16);

        IvParameterSpec ivParamSpec = new IvParameterSpec(randomIV);
        byte[] realEncrypedPrivKey = new byte[32];
        System.arraycopy(encryptedPriKeyBytes, 16, realEncrypedPrivKey, 0, 32);

        byte[] decryptedPriv = cryptFactory.decrypt(realEncrypedPrivKey, sessionKey, ivParamSpec);

        // create ECPrivKey
        ECPrivateKeySpec privSpec = new ECPrivateKeySpec(new BigInteger(decryptedPriv), ecSpec);
        PrivateKey privateKey = keyFactory.generatePrivate(privSpec);


        // signature 생성
        Map targetMap = new HashMap<Class<?>, Object>() {{
            put(CertificateUpdateReqType.class, certUpdtReq);
        }};
        SignatureType signature = new SignatureType();
        signature.setSignedInfo(createSignedInfo(targetMap));

        JAXBElement<SignedInfoType> signedInfoJAXB = ObjectFactory.createSignedInfoType(signature.getSignedInfo());


        String priKeyStr = Utils.base64Encode(privateKey.getEncoded());
        String contractCertStr = Utils.base64Encode(contractCert);
        // signature 생성
        signature.setSignatureValue(MsgDigest.signSignedInfoElement(signedInfoJAXB, (java.security.interfaces.ECPrivateKey)privateKey));


        // signature 검증 -- test ////////////////////////////////////////////////////////
        X509Certificate prevContrcert = certFactory.getX509Cert(contractCert);
        ECPublicKey pubKey = (ECPublicKey) prevContrcert.getPublicKey();

        Signature signer = Signature.getInstance("SHA256withECDSA", BouncyCastleProvider.PROVIDER_NAME);
        signer.initVerify(pubKey);

//        val signedInfoJAXB = ObjectFactory().createSignedInfoType(signature.getSignedInfo());

        byte[] signedInfoDigestBytes = MsgDigest.marshalToByteArray(signedInfoJAXB, SignedInfoType.class);
        signedInfoDigestBytes = ExiFactory.getInstance().encodeEXI(signedInfoDigestBytes, true, true);
        signer.update(signedInfoDigestBytes);
        String checkSignedInfo = Utils.base64Encode(signedInfoDigestBytes);
        //rawSignature to DEREncodedSignature
        byte[] derEncodedSignature = certFactory.getDEREncodedSignature(signature.getSignatureValue());
        String sig = Utils.base64Encode(derEncodedSignature);
        boolean flag = signer.verify(derEncodedSignature);

        ////////////////////////////////////////////////////////////////////////

        // 3. V2G Message 생성
        V2gHeaderType v2gHeader = new V2gHeaderType();
        v2gHeader.setSessionId(sessionID);
        v2gHeader.setSignature(signature);
        BodyType bodyMsg = new BodyType();
        bodyMsg.setBodyElement(ObjectFactory.createCertificateUpdateReq(certUpdtReq));
        V2GMessage v2gMsg = new V2GMessage();
        v2gMsg.setHeader(v2gHeader);
        v2gMsg.setBody(bodyMsg);

        return v2gMsg;
    }

    public V2GMessage createCertInstallReq() throws Exception {

        // 1. CertificateInstallationReq Msg 생성
        X509IssuerSerialType x509IssuerSerial = new X509IssuerSerialType();
        x509IssuerSerial.setX509IssuerName(v2gRootDN);
        x509IssuerSerial.setX509SerialNumber(v2gSerial);

        List<X509IssuerSerialType> rootCertificateIDs = Arrays.asList(x509IssuerSerial); // new ArrayList<>();

        CertificateInstallationReqType certInstReq = new CertificateInstallationReqType();

        ListOfRootCertificateIDsType listOfRootCertificateIDsType = new ListOfRootCertificateIDsType();
        listOfRootCertificateIDsType.setRootCertificateID(rootCertificateIDs);

        certInstReq.setId("ID1");
        certInstReq.setOEMProvisioningCert(Utils.base64Decode(oemCert));
        certInstReq.setListOfRootCertificateIDs(listOfRootCertificateIDsType);

        // 2. signature 생성
        // sign target
        Map<Class<?>, Object> targetMap = new HashMap<Class<?>, Object>() {{
            put(CertificateInstallationReqType.class, certInstReq);
        }};

        SignatureType signature = createSignature(targetMap, oemPfxCert);

        // 3. V2G Message 생성
        V2gHeaderType v2gHeader = new V2gHeaderType();
        v2gHeader.setSessionId(sessionID);
        v2gHeader.setSignature(signature);
        BodyType bodyMsg = new BodyType();
        bodyMsg.setBodyElement(ObjectFactory.createCertificateInstallationReq(certInstReq));
        V2GMessage v2gMsg = new V2GMessage();
        v2gMsg.setHeader(v2gHeader);
        v2gMsg.setBody(bodyMsg);

        return v2gMsg;
    }

    public SignatureType createSignature(Map<Class<?>, Object> targetMap, String pfx) throws Exception {
        CertFactory certFactory = new CertFactory();
        SignatureType signature = new SignatureType();

        signature.setSignedInfo(createSignedInfo(targetMap));
        JAXBElement<SignedInfoType> signedInfoJAXB = ObjectFactory.createSignedInfoType(signature.getSignedInfo());

        KeyStore keystore = certFactory.getPKCS12KeyStore(pfx, PASSPHRASE_FOR_CERTIFICATES_AND_KEYS);
        java.security.interfaces.ECPrivateKey ecPrivateKey = certFactory.getPrivateKey(keystore, "PFXCertificate");
        signature.setSignatureValue(MsgDigest.signSignedInfoElement(signedInfoJAXB, ecPrivateKey));

        return signature;
    }

    public SignedInfoType createSignedInfo(Map<Class<?>, Object> targetMap) throws Exception {
        SignedInfoType signedInfo = new SignedInfoType();

        List<ReferenceType> list = new ArrayList<ReferenceType>();

        for (Class key : targetMap.keySet()) {
            Object value = targetMap.get(key);
            ReferenceType digest = new ReferenceType();
            digest.setTransforms(new TransformsType());
            byte[] digestBytes = null;

            String className = key.getName();
            className = className.substring(className.lastIndexOf(".")+1);
            switch(className) {
                case "CertificateUpdateReqType" :
                    CertificateUpdateReqType obj = (CertificateUpdateReqType)value;
                    digest.setURI("#" + obj.getId());
                    JAXBElement<CertificateUpdateReqType> jaxb = ObjectFactory.createCertificateUpdateReq(obj);
                    digestBytes = MsgDigest.generateDigest(jaxb, key, false);
                    break;
                case "CertificateInstallationReqType" :
                    CertificateInstallationReqType certInstReqObj = (CertificateInstallationReqType)value;
                    digest.setURI("#" + certInstReqObj.getId());
                    JAXBElement<CertificateInstallationReqType> certInstReqJaxb = ObjectFactory.createCertificateInstallationReq(certInstReqObj);
                    digestBytes = MsgDigest.generateDigest(certInstReqJaxb, key, false);
                    break;
                case "ContractSignatureEncryptedPrivateKeyType" :
                    ContractSignatureEncryptedPrivateKeyType encryptedPrivateKeyObj = (ContractSignatureEncryptedPrivateKeyType) value;
                    digest.setURI("#" + encryptedPrivateKeyObj.getId());
                    JAXBElement<ContractSignatureEncryptedPrivateKeyType> encryptedPrivateKeyJAXB = ObjectFactory.createEncryptedPrivateKeyType(encryptedPrivateKeyObj);
                    digestBytes = MsgDigest.generateDigest(encryptedPrivateKeyJAXB, key, false);
                    break;
                case "CertificateChainType" :
                    CertificateChainType contractCertChainObj = (CertificateChainType) value;
                    digest.setURI("#" + contractCertChainObj.getId());
                    JAXBElement<CertificateChainType>  contractCertChainJAXB = ObjectFactory.createCertChainType(contractCertChainObj);
                    digestBytes = MsgDigest.generateDigest(contractCertChainJAXB, key, false);
                    break;
                case "EMAIDType" :
                    EMAIDType emaidObj = (EMAIDType) value;
                    digest.setURI("#" + emaidObj.getId());
                    JAXBElement<EMAIDType>  emaidJAXB = ObjectFactory.createEmaidType(emaidObj);
                    digestBytes = MsgDigest.generateDigest(emaidJAXB, key, false);
                    break;
                case "DiffieHellmanPublickeyType" :
                    DiffieHellmanPublickeyType dhPubKeyObj = (DiffieHellmanPublickeyType) value;
                    digest.setURI("#" + dhPubKeyObj.getId());
                    JAXBElement<DiffieHellmanPublickeyType> dhPubKeyJAXB = ObjectFactory.createDhPublicKeyType(dhPubKeyObj);
                    digestBytes = MsgDigest.generateDigest(dhPubKeyJAXB, key, false);
                    break;
            }
            digest.setDigestValue(digestBytes);
            list.add(digest);
        }

        signedInfo.setReference(list);
        return signedInfo;
    }


    public String getOcspReq() throws Exception {

//        String validCert = "MIICZzCCAh2gAwIBAgIGAOjUpRAyMAoGCCqGSM49BAMCMEAxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExETAPBgNVBAMMCE1PU3ViQ2EyMB4XDTIwMDEwOTAwMDAwMFoXDTIyMDEwOTIzNTk1OVowSjELMAkGA1UEBhMCS1IxDjAMBgNVBAoMBXBlbnRhMQ4wDAYDVQQLDAVwZW50YTEbMBkGA1UEAwwSS1ItS0VQLTJIN0pGTllFVC04MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEqWUnZnpraLfWwNFHXd3cTyptIys4VETfcb25YeTVhTPlAMhhOXwRoFwtd2eVUzM2rHLFrNpjk/74vqUdywfAmaOB+DCB9TBoBgNVHSMEYTBfgBQEXQdq/zNYgaEIqEmJ8b/TA+IEDqFEpEIwQDELMAkGA1UEBhMCS1IxDjAMBgNVBAoMBXBlbnRhMQ4wDAYDVQQLDAVwZW50YTERMA8GA1UEAwwITU9TdWJDYTGCARAwHQYDVR0OBBYEFJhFv0EbYqVHEa3CqeIEyL6DkJicMA4GA1UdDwEB/wQEAwIFoDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vMTI3LjAuMC4xL2NuPWRwX2ppZ1NKNHowUXEyQ1JDYkpTTTN1MFFwMCxvdT1wZW50YSxvPXBlbnRhLGM9S1IuY3JsMAoGCCqGSM49BAMCAzgAMDUCGQC06/u58BWFzRSp9sIvVC3+Fe05GB8o+j4CGGlkNUpohvb9TXQQ+qjeHupAIfjTpYK7Dw==";
//        String caCert = "MIICZzCCAg2gAwIBAgIBEDAKBggqhkjOPQQDAjBAMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMREwDwYDVQQDDAhNT1N1YkNhMTAeFw0yMDAxMDcwNDM2MTFaFw0yMTAxMDcwNDM2MTFaMEAxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExETAPBgNVBAMMCE1PU3ViQ2EyMEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEENVVvW1t+pu5Pi/9b+AJdec6+fOTxtqPL5jl6dGv0KDm33H3w1/6lPD6bmZ/VXUyo4IBBjCCAQIwHQYDVR0OBBYEFARdB2r/M1iBoQioSYnxv9MD4gQOMGYGA1UdIwRfMF2AFKjVNfFgJ7bJUFXN6gDrFhVvSY4/oUKkQDA+MQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMQ8wDQYDVQQDDAZNT1Jvb3SCAQ8wDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQAwVQYDVR0fBE4wTDBKoEigRoZEaHR0cDovLzEyNy4wLjAuMS9jbj1vNmJEMUVxWFR0dWFHU2Q2QXVTQkVBLG91PXBlbnRhLG89cGVudGEsYz1LUi5hcmwwCgYIKoZIzj0EAwIDSAAwRQIgd5qu8ocHvptJ76S6LRPedwtOj0ht8jVZ8ZKfNJtlTA0CIQCnD3wlrSTBYjffoj4nfskMYc7HdipZQMZnavAkcdkIHA==";


        OcspReqClient ocspReqClient = new OcspReqClient(url_OCSP);
//        ocspReqClient.add(validCert, caCert, null, null);
        ocspReqClient.add(this.contractCert, this.moSubca2, null, null);
        byte[] ocspReqBytes = ocspReqClient.buildReq();

        return new String(Utils.base64Encode(ocspReqBytes));
    }
    public String reqOcsp() throws Exception {
//        String validCert = "MIICZzCCAh2gAwIBAgIGAOjUpRAyMAoGCCqGSM49BAMCMEAxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExETAPBgNVBAMMCE1PU3ViQ2EyMB4XDTIwMDEwOTAwMDAwMFoXDTIyMDEwOTIzNTk1OVowSjELMAkGA1UEBhMCS1IxDjAMBgNVBAoMBXBlbnRhMQ4wDAYDVQQLDAVwZW50YTEbMBkGA1UEAwwSS1ItS0VQLTJIN0pGTllFVC04MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEqWUnZnpraLfWwNFHXd3cTyptIys4VETfcb25YeTVhTPlAMhhOXwRoFwtd2eVUzM2rHLFrNpjk/74vqUdywfAmaOB+DCB9TBoBgNVHSMEYTBfgBQEXQdq/zNYgaEIqEmJ8b/TA+IEDqFEpEIwQDELMAkGA1UEBhMCS1IxDjAMBgNVBAoMBXBlbnRhMQ4wDAYDVQQLDAVwZW50YTERMA8GA1UEAwwITU9TdWJDYTGCARAwHQYDVR0OBBYEFJhFv0EbYqVHEa3CqeIEyL6DkJicMA4GA1UdDwEB/wQEAwIFoDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vMTI3LjAuMC4xL2NuPWRwX2ppZ1NKNHowUXEyQ1JDYkpTTTN1MFFwMCxvdT1wZW50YSxvPXBlbnRhLGM9S1IuY3JsMAoGCCqGSM49BAMCAzgAMDUCGQC06/u58BWFzRSp9sIvVC3+Fe05GB8o+j4CGGlkNUpohvb9TXQQ+qjeHupAIfjTpYK7Dw==";
//        String caCert = "MIICZzCCAg2gAwIBAgIBEDAKBggqhkjOPQQDAjBAMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMREwDwYDVQQDDAhNT1N1YkNhMTAeFw0yMDAxMDcwNDM2MTFaFw0yMTAxMDcwNDM2MTFaMEAxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExETAPBgNVBAMMCE1PU3ViQ2EyMEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEENVVvW1t+pu5Pi/9b+AJdec6+fOTxtqPL5jl6dGv0KDm33H3w1/6lPD6bmZ/VXUyo4IBBjCCAQIwHQYDVR0OBBYEFARdB2r/M1iBoQioSYnxv9MD4gQOMGYGA1UdIwRfMF2AFKjVNfFgJ7bJUFXN6gDrFhVvSY4/oUKkQDA+MQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMQ8wDQYDVQQDDAZNT1Jvb3SCAQ8wDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQAwVQYDVR0fBE4wTDBKoEigRoZEaHR0cDovLzEyNy4wLjAuMS9jbj1vNmJEMUVxWFR0dWFHU2Q2QXVTQkVBLG91PXBlbnRhLG89cGVudGEsYz1LUi5hcmwwCgYIKoZIzj0EAwIDSAAwRQIgd5qu8ocHvptJ76S6LRPedwtOj0ht8jVZ8ZKfNJtlTA0CIQCnD3wlrSTBYjffoj4nfskMYc7HdipZQMZnavAkcdkIHA==";

        OcspReqClient ocspReqClient = new OcspReqClient(url_OCSP);
        ocspReqClient.add(this.contractCert, this.moSubca2, null, null);
        byte[] ocspReqBytes = ocspReqClient.buildReq();

        // Send Post
        byte[] resPost = ocspReqClient.sendPost(ocspReqBytes);
        if (resPost != null) {
            return ocspReqClient.validOcspResponse(resPost);
        } else {
            throw new Exception("Fail to open ocsp connection");
        }
    }


    public String getCertInstReqMsg() throws Exception {
        if(oemCert == null)
            throw new Exception("OEM Certificate 가 존재하지 않습니다.");
        V2GMessage v2gMsg = createCertInstallReq();

        byte[] v2gMsgXml = MsgDigest.generateXMLToByteArray(v2gMsg, V2GMessage.class);
        String v2gMsgXmlStr = new String(v2gMsgXml);

        return v2gMsgXmlStr;
    }

    public String getCertInstResMsg(String certInstReqV2gMsg) throws Exception {

        String encodedV2gMsgXml = Utils.base64Encode(ExiFactory.getInstance().encodeEXI(certInstReqV2gMsg.getBytes(), false, false));

        // certificateInstallResponse 요청
        V2gMessage req = new V2gMessage(encodedV2gMsgXml);
        V2gMessage result = v2g.certInstMsgRequest(req);
        String resmsg = result.getV2gMessage();

        String decodedMsg = ExiFactory.getInstance().decodeEXI(resmsg, false, false);
        V2GMessage resV2gMsg = (V2GMessage) MsgDigest.unmarshallToMessage(decodedMsg.getBytes(), V2GMessage.class);
        JAXBElement<CertificateInstallationResType> certInstRes = (JAXBElement<CertificateInstallationResType>) resV2gMsg.getBody().getBodyElement();

        this.emaid = certInstRes.getValue().getEMAID().getValue();
        this.contractCert = Utils.base64Encode(certInstRes.getValue().getContractSignatureCertChain().getCertificate());
        this.instResMsg = resmsg;

        return decodedMsg;
    }

    public String getCertUpdtReqMsg() throws Exception {

        // 잘됨
//        this.instResMsg = "gJhwGYRUStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJehq0Ojo4HReXu7u7lzuZlze5M5eZGBgYl5gaF7w2tjI5tLOWtre5MpGysbI5sJa5tDCZGpsiBiNpZDICVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0hS0Ojo4HReXu7u7lzuZlze5M5eZGBgYl5gaF7w2tjK3MZG5tDCZGpshAeEdJV/e34UYL+8hzijtBnnZQivXsnmjCMlWBESrFpegIGI2lkMQJWh0dHA6Ly93d3cudzMub3JnL1RSL2Nhbm9uaWNhbC1leGkvSFLQ6OjgdF5e7u7uXO5mXN7kzl5kYGBiXmBoXvDa2Mrcxkbm0MJkamyEGghRikDoRZjWzQ1OuxxhqqPhjmaKcb7+uS2NoEpVJlGAgYjaWQ0AlaHR0cDovL3d3dy53My5vcmcvVFIvY2Fub25pY2FsLWV4aS9IUtDo6OB0Xl7u7u5c7mZc3uTOXmRgYGJeYGhe8NrYytzGRubQwmRqbIQLLT6Crv5COe2oaxVtKEjcK/HjJTmOSQXRXX/GlgpW1uCBiNpZDMCVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0hS0Ojo4HReXu7u7lzuZlze5M5eZGBgYl5gaF7w2tjK3MZG5tDCZGpshBRoZlIkG+UlBnqw38O1rY7ZifHwfssa96K7FdcuRaDo4lA7rnPfcfJvGt59rzvbseZ/rI7w9t8wPWUP/2kEA03R6rgxFAi7eiGN/uV+oJ6ggkgNarZwXUKV9ulq38glUm8t0DABbAKYQQFqGEEBPdABgQCBAQMAdGpSiASYBQMEFUMkZx6CAYEYLpiRGBADAaqCAYYMqCWklpivoakqL6gpJ6svqaqhGS+rIKYkohiKmAmDAaqCBQYGOzK5NLmxt5AjtrEkGIWYBIMBqoIDCYEiIpiJmAiDBQTJE0TJ+RYyAIyLAaGoKZgPC4aYnJiYmBwYGBgYGBgtC4aZGJiYmBwZGZqcmpytGDiYhZgEgwGqggMJgSIimIqYCYMBqoIFBgY7Mrk0ubG3kCO2sSQYiRgIAwGqggWGBKC6ujexuTy4OhiJmAiDBQTJE0TJ+RYyAIyLAaGoKZiRGBADAaqCAYYMqCWklpivoakqL6gpJ6svpiKgoy+rIKYkohgsmAmDA5VDJGcegQCDBBVDJGcegYCDgaEAAgm7WJpgezQTWxv1ghdr5OPEpptK/I5bMaYRfld1rI25NZ/GKc09YsxkxMthkvhES18+iLEOVsGzYWMbeuXYkKFRwQCImEEAhphAwoMBqo6Rgj8YPkAKDy2I1tKj4oUB8AdAA3TgSa/ZZhLQsNIvmC6YkRgQAwGqggGGDKglpJaYr6GpKi+oKSerL6mqoRivqyCmJKIYipgJgwGqggUGBjsyuTS5sbeQI7axJBiFmASDAaqCAwmBIiKYiZgIgwUEyRNEyfkWMgCMiwGhqCnBAIuYDoMBqo6HAgsCCgP0B37MMc9oVotzc7d3Zl6EAGTymAcDAaqOh4CA/4ICAYEDwBgqAwGqjo+CJpglmCTQI9AiwyGxtx6yOC+ZNycpvSg2uSkbobEYurIyq6Q6pLqzuBgWN7qeoLq6N7G5PLg6FjeeuzK5NLmxt5AjtrEkFjGeoiKXMbk2GAUDBBVDJGceggGBAaOAGCIBEBkciqO0uv2jHEedpU9F8V6qdZG7w0opnZZigy69OX9zgRAXTZTc7763FalMvECT7JmJ2Gcaxd/M7ofdtH+IoqYONgPADMIIB7DCCAZOgAwIBAgIBFjAKBggqhkjOPQQDAjBcMSEwHwYDVQQDDBhQS0ktMV9DUlRfVjJHX1JPT1RfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEzARBgoJkiaJk/IsZAEZFgNWMkcwHhcNMTkxMDI5MTYzMTU1WhcNMjMxMDI4MTYzMTU1WjBdMSIwIAYDVQQDDBlQS0ktMV9DUlRfUFJPVl9TVUIxX1ZBTElEMRUwEwYDVQQKDAx2ZXJpc2NvIEdtYkgxCzAJBgNVBAYTAkRFMRMwEQYKCZImiZPyLGQBGRYDQ1BTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE40LV4eZOyyMf6XFMpOBp254uGgjHMaBuV0uB05OiClBO4LjfEYq7PsSBWrl5g6IPMg1LgBwT795DpVpgfQZ1LqNFMEMwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFHAINwcGkrEzu/CyEBkmogrKIQoUMAoGCCqGSM49BAMCA0cAMEQCIBJUN9Kr1THxcxmYkwUgqz6X484JevUDGQMV0iucl7JfAiBI9fIMvabocdnvt6W++5u8JKuEANrPWpThpS+LCUhNuQ8wMwggHvMIIBlKADAgECAgEXMAoGCCqGSM49BAMCMF0xIjAgBgNVBAMMGVBLSS0xX0NSVF9QUk9WX1NVQjFfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEzARBgoJkiaJk/IsZAEZFgNDUFMwHhcNMTkxMDI5MTYzMTU1WhcNMjExMDI4MTYzMTU1WjBdMSIwIAYDVQQDDBlQS0ktMV9DUlRfUFJPVl9TVUIyX1ZBTElEMRUwEwYDVQQKDAx2ZXJpc2NvIEdtYkgxCzAJBgNVBAYTAkRFMRMwEQYKCZImiZPyLGQBGRYDQ1BTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEPu7U5fn/I9m+3Bj4kp9jds/TSc/35pciurVR/OamN00znZG7fNrM1pBc6MurfNKPh6CFwoL0gq3G4Kwp7nYT+qNFMEMwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFB5bEa2lR8UKA+AOgAbpwJNfsswlMAoGCCqGSM49BAMCA0kAMEYCIQCZu1Iq9hLTeTMWJah5QBnw5WfRg6k7w9rd7Ys8eK9F9wIhALGfohTMSKh2OcwohIa8P8+MlgIad6D96DuQaCLV43VIIArSyGJigphBAWCYQQE0UAGBAIEBAwB0alKIUJgFAwQVQyRnHoIBgRgtGJAYDwMBqoIBhguoJaSWmK+hqSovpqevqaqhGS+rIKYkohiKmAmDAaqCBQYGOzK5NLmxt5AjtrEkGIWYBIMBqoIDCYEiIpiJGAgDBQTJE0TJ+RYyAIyLASanmA8LhpicmJkYmBgYGBgYGC0LhpkYmJkYmBkZmpyanK0YMhiFmASDAaqCAwmBIiKYipgJgwGqggUGBjsyuTS5sbeQI7axJBiJGAgDAaqCBYYEsLq6N7G5PLg6GIkYCAMFBMkTRMn5FjIAjIsBJqeYixgKAwGqggGGBpgZr6oiqaovoqagpKIYLJgJgwOVQyRnHoEAgwQVQyRnHoGAg4GhAAJlgfx55MHKShbjQVTlasA4j/Xn0P1cXkl/+sBFk07CYYavkAJzfjMve4djjSsf6ztW7o95MnEdLZdgCkRih1EO0cEAhxhBAIUYQMEDAaqOkYI9mDzACh15xm9vAm5OUPD77Rm0vANC4VKgUK9SLhgtGJAYDwMBqoIBhguoJaSWmK+hqSovpqevqaqhGK+rIKYkohiKmAmDAaqCBQYGOzK5NLmxt5AjtrEkGIWYBIMBqoIDCYEiIpiJGAgDBQTJE0TJ+RYyAIyLASanwQCGmA6DAaqOhwILAgpydAfSwP3ZgRCiSAElIrUjbP9xBRgHAwGqjoeAgP+CAgGBAfQYKgMBqo6PgiaYJZgk0CPQIsMhsbcesjgvqSqjO60nvDIqNCejprOxJ7M2KiQZs7gYFje6nrC6ujexuTy4OhY3nrsyuTS5sbeQI7axJBYxnqIilzG5NhgFAwQVQyRnHoIBgQGjgBgiARA5QvdOyzmm1gmWb3ieHYI5Pt0p0ouacd/Z8ku/m4+MzwEQJVWvc2LYURlLsZjXOTpYFGbPJY6zTwQPDQjJjgZXO9qDtAzCCAekwggGOoAMCAQICAQwwCgYIKoZIzj0EAwIwWjEgMB4GA1UEAwwXUEtJLTFfQ1JUX01PX1JPT1RfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEjAQBgoJkiaJk/IsZAEZFgJNTzAeFw0xOTEwMjkxNjMxNTRaFw0yMzEwMjgxNjMxNTRaMFoxIDAeBgNVBAMMF1BLSS0xX0NSVF9NT19TVUIxX1ZBTElEMRUwEwYDVQQKDAx2ZXJpc2NvIEdtYkgxCzAJBgNVBAYTAkRFMRIwEAYKCZImiZPyLGQBGRYCTU8wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATVOVYD3dJyDSvCdkN3+tQgW6t6WKSAUoX6VEH4vJlfVM5hpvvDfmJClJ2Uv3oL0Q5sLPBkM2X/o93hTpGBLMiNo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUOlBq6sJmLqT6mipZfKWlcOQwGz4wCgYIKoZIzj0EAwIDSQAwRgIhAMTAFBjaA22LtGiEqHnL2Vcz+aK7gFqh044qfdcBffz8AiEA3HiuC8KK9G9/Leo90/k/e4l4rgwFav/K+Jn9VH1Ww9AOwDMIIB6DCCAY6gAwIBAgIBDTAKBggqhkjOPQQDAjBaMSAwHgYDVQQDDBdQS0ktMV9DUlRfTU9fU1VCMV9WQUxJRDEVMBMGA1UECgwMdmVyaXNjbyBHbWJIMQswCQYDVQQGEwJERTESMBAGCgmSJomT8ixkARkWAk1PMB4XDTE5MTAyOTE2MzE1NFoXDTIzMTAyODE2MzE1NFowWjEgMB4GA1UEAwwXUEtJLTFfQ1JUX01PX1NVQjJfVkFMSUQxFTATBgNVBAoMDHZlcmlzY28gR21iSDELMAkGA1UEBhMCREUxEjAQBgoJkiaJk/IsZAEZFgJNTzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKU++1eAJ92ORDgu9nfXL7Ap7ZqzHoczKgmioefBTzpEklNihnADOY0MScd9jTd9z2QtCgkVEXQ40Nw1yQeh5DujRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgHGMB0GA1UdDgQWBBQ684ze3gTcnKHh99ozaXgGhcKlQDAKBggqhkjOPQQDAgNIADBFAiEAwTpyRDLK40Uqx9zFA589AIP2A9ZgLvu2WU2SykvA4HgCIH6KRZ6nTlr8jBfA9b/WlIr4nEmtHEUAE0KwWcc37sztIBWlkMhgNAub5vQzRQy+NjxNHIEg5BV2qaGaq2bsuaMqHYVu9AOucqE95j9UxkOplLy3/Qw8AVpZDMggmsFQ+bVEiCKV2qO+Yh2XjBI2PW1UMPMJMEjwVw9p0b49W4joCdOOUH++8tytPJhauLgtkcviBoN95tV5ZPOVfQAVpZDQHmBmvqiKpqi+ipqCkogA==";
//        this.oemPfxCert = "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";

        //안됨
        this.instResMsg = "gJgCDVeM2ETwL6dKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIZAStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkINVAGC7x929m5TO0nRyMhWX/xvWMzp5q0EspBK+j3BzmBAxG0shiBK0Ojo4HReXu7u7lzuZlze5M5eqKRexsLc3tzSxsLYWsrw0l6QpaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2QguwnzJefhqFlFXbrioUu+x8JfwIqm6I/7ZFhOkh66isUEDEbSyGgErQ6OjgdF5e7u7uXO5mXN7kzl6opF7Gwtze3NLGwthayvDSXpClodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTZCAF64BJcTnnUY9/SbNOfrhOnXUcEssF9uzmgYi9n+6wrgQMRtLIZgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIKtfDBvOhCtOiqrEofERTjf2R+LJ2F/6pW5H/ae9fCswEoAZatTb8yZBhtByI74pyA2K1RXSttzY/5eLuJVGgaRGkgXNUHvUwGqlSECqdRBDTEFqSpxqnBjuYKkkGbsouUi6gYAKrBTCCAqcwggJOoAMCAQICBgDo1KUQBzAKBggqhkjOPQQDAjBBMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMRIwEAYDVQQDDAlDUFNTdWJDYTIwHhcNMjAwMTA3MDAwMDAwWhcNMjIwMTA3MjM1OTU5WjBCMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMRMwEQYDVQQDDApDcHNMZWFmMDAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7iJdfAWfFsYd7XlccBID0IYTXBvsV2ksGAsru7Tu7CC274cL4kDo0O7d5VzPdRR3xu2OUGyI5LYqp6bDZQXmsaOCAS8wggErMGkGA1UdIwRiMGCAFN+gALZXxV0bK2Q6OIHh3Jwyju/boUWkQzBBMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMRIwEAYDVQQDDAlDUFNTdWJDYTGCAQ0wHQYDVR0OBBYEFEaWSsv+7Neg2/cl5oEBH9oUrwocMA4GA1UdDwEB/wQEAwIHgDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vMTI3LjAuMC4xL2NuPWRwX2xYT2IzeTgwUWpPb2x0ei1ZcWRSVXdwMCxvdT1wZW50YSxvPXBlbnRhLGM9S1IuY3JsMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovLzUyLjIzMS41NS44OjkwOTIwCgYIKoZIzj0EAwIDRwAwRAIgXz3/QxnPNCDj3vZO5Ye949o6yPTCQPxP3XfvV/tMlicCIFdavGsPywnHXwmZzAupGNK/2KcuV9BtnK/KttOerTR2BigphBAWCYQQEzUAGBAIEBAIYYBQMEFUMkZx6CAYEYIZiFmASDAaqCAwmBJakYhxgGAwGqggUGArgytzowmIcYBgMBqoIFhgK4Mrc6MJiKGAkDAaqCAYYFqxkjqTe3uiGyuToYDwuGmRgYGJgbmBoYHJibLQuGmRoYGJgbmBoYHJibLRggmIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIkYCAMBqoIBhgShqCmpurEhsJiYLJgJgwOVQyRnHoEAgwQVQyRnHoGAg4GhAAIbVY+Ns9lPuLoySQIUl9XrJyhXhc1esKGtxUaD+qJI5tb5/lqjlUYvk5a2u/g1n3JTcpm5AcR5kV5zLPhk6jLB0cEApZhBAKOYDoMBqo6HAgsCCiQCyktHHigbq1oNmEbpmUxoZ48UmDWDAaqOkYIyGDFACiWjfyqugMCO2EBVZTxFgNAaBkkEUKPSIpghmIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIoYCQMBqoIBhgWrGSOpN7e6IbK5OkEAghgHAwGqjoeAgP+CAgGBAIMYCQMBqo6JgID/ggQYAwCA/4EAgJgqgwGqjo+CJxgmGCVQJFAjQyI0Ojo4HReXmJkblxgXGBcYl7G3HqUjNjigmiEnKbgrujy0GZy7MrksGrOWN7qeuDK3OjCWN564Mrc6MJYxnqWpFzC5NhgfAwQVgwCCgoOAgIIZGBgYFwMEFYMAgoKDmADDETQ6OjgdF5eamRcZGZiXGpqXHB0cmByZl6ehqagpsrk7MrkYBQMEFUMkZx6CAYEBpIAYIwEQgHINTfC+a245RScv/8Fa6iungRlg7zM72/Sw6bLoWE9AgRCATlJId3vvUFfEpo7fZMK63qWPEpD5HJkiF56P9IRJyNaGGCmEEBX5hBATJQAYEAgQEAhpgFAwQVQyRnHoIBgRggmIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIkYCAMBqoIBhgShqCmpurEhsJiYDwuGmRgYGJgbmBoYHJocrQuGmRkYGJgbmBoYHJocrRggmIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIkYCAMBqoIBhgShqCmpurEhsJkYLJgJgwOVQyRnHoEAgwQVQyRnHoGAg4GhAAIewxphsJRp6zpHEItWCRRXaA+Ysa8PaglXAn1QYLhbvcq8CJYCt5pdfjC5P+c7JW/8ijgkUSAhmY/EfTPpmfFD0cEApZhBAKOYDoMBqo6HAgsCCm/QAFsr4q6NlbIdHEDw7k4ZR3ftmDWDAaqOkYIyGDFACiQCyktHHigbq1oNmEbpmUxoZ48U0KPSIpghmIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIoYCQMBqoIBhgWrGSOpN7e6IbK5OkEAhhgHAwGqjoeAgP+CAgGBAIMYCQMBqo6JgID/ggQYAwCA/4EAgBgqgwGqjo+CJxgmGCVQJFAjQyI0Ojo4HReXmJkblxgXGBcYl7G3Hra0NzkaODQ1KjqypzElqJuYqTM6L7uWN7qeuDK3OjCWN564Mrc6MJYxnqWpFzC5NhgfAwQVgwCCgoOAgIIZGBgYFwMEFYMAgoKDmADDETQ6OjgdF5eamRcZGZiXGpqXHB0cmByZl6ehqagpsrk7MrkYBQMEFUMkZx6CAYEBpIAYIwEQgHFfV6dVITpOxAm1x31lDSwCRShlfvIfZX7WIcDEmYkOARCAZJd8wGX7EZSHcxvDkc2qbI+IdKl3rYRbJo3TTXQU4BMQBWlkMTrBDCCAmcwggIdoAMCAQICBgDo1KUQbTAKBggqhkjOPQQDAjBAMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMREwDwYDVQQDDAhNT1N1YkNhMjAeFw0yMDAxMTcwMDAwMDBaFw0yMjAxMTcyMzU5NTlaMEoxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExGzAZBgNVBAMMEktSLUtFUC1LMk5BV0g4TFAtMjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABG5YWbu1PCDoiLurMz9jLI/WSL0sDR9BCsdPrf102sYPZ8IfdbsDC4oiERPK+XmBCEWer29GtWDiQr03PjicQXijgfgwgfUwaAYDVR0jBGEwX4AUBF0Hav8zWIGhCKhJifG/0wPiBA6hRKRCMEAxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExETAPBgNVBAMMCE1PU3ViQ2ExggEQMB0GA1UdDgQWBBQb1fXt2BTooSy5CKBpFKzSh98wMjAOBgNVHQ8BAf8EBAMCBaAwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDovLzEyNy4wLjAuMS9jbj1kcF9qaWdTSjR6MFFxMkNSQ2JKU00zdTBRcDAsb3U9cGVudGEsbz1wZW50YSxjPUtSLmNybDAKBggqhkjOPQQDAgM4ADA1Ahg3UhHDnI+n2+b5i91kB899STeseGRS308CGQDPjKRAYYYUwPf4zuM2j9RmiPpn87CrKtsH0CGEEBOxhBAQ3QAYEAgQEAh5gFAwQVQyRnHoIBgRgfGIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIeYBoMBqoIBhgMmp6k3t7oYDwuGmRgYGJgbmBoZmpoZLQuGmRiYGJgbmBoZmpoZLRggGIWYBIMBqoIDCYElqRiHGAYDAaqCBQYCuDK3OjCYhxgGAwGqggWGArgytzowmIiYB4MBqoIBhgQmp6m6sSGwmJgsmAmDA5VDJGcegQCDBBVDJGcegYCDgaEAAgxS9duy+t5UMmJFIVMjB0swFXdE+oTaxC+T6Tv5wIA0eqwX+KiII6EJBuB7F6ePsZyQFaNcC1Vki7ssz6O4lifRwQCDGEEAgRgOgwGqjocCCwIKVGqa+LAT22SoKub1AHWLCrekxx+YMwMBqo6Rgi+YLsAKOHsEmnooFozfcodEKaL+DBUssdpQoVIgGB8YhZgEgwGqggMJgSWpGIcYBgMBqoIFBgK4Mrc6MJiHGAYDAaqCBYYCuDK3OjCYh5gGgwGqggGGAyanqTe3ukEAhxgHAwGqjoeAgP+CAgGBAIMYCQMBqo6JgID/ggQYAwCA/4EAgJgqgwGqjo+CJxgmGCVQJFAjQyI0Ojo4HReXmJkblxgXGBcYl7G3Hri6qjGbNzU1qaIpmiQ0OSyysbclPTOWN7qeuDK3OjCWN564Mrc6MJYxnqWpFzC5NhgFAwQVQyRnHoIBgQGkgBgjARCAW9Bh8Rz2GHM1j5fKWEATFz3uS+j/PCVf2SyAO9Et0ZQBEIBK01Bey2R4BKs9/TcdOO1iOBDqStuAMcPdDcA1OCw06QdYIYQQEzmEEBBtABgQCBAQCIGAUDBBVDJGceggGBGCAYhZgEgwGqggMJgSWpGIcYBgMBqoIFBgK4Mrc6MJiHGAYDAaqCBYYCuDK3OjCYiJgHgwGqggGGBCanqbqxIbCYmA8LhpkYGBiYG5gaGZsYmK0LhpkYmBiYG5gaGZsYmK0YIBiFmASDAaqCAwmBJakYhxgGAwGqggUGArgytzowmIcYBgMBqoIFhgK4Mrc6MJiImAeDAaqCAYYEJqepurEhsJkYJJgJgwOVQyRnHoEAgwQVQyRnHoGAgIGZAAIIaqretrb9TdyfF/638AS68518+cnjbUeXzHL06NfoUHNvuPvhr/1KeH03Mz+quplRwQCDGEEAgRgOgwGqjocCCwIKAi6DtX+ZrEDQhFQkxPjf6YHxAgcYMwMBqo6Rgi+YLsAKVGqa+LAT22SoKub1AHWLCrekxx/QoVIgGB8YhZgEgwGqggMJgSWpGIcYBgMBqoIFBgK4Mrc6MJiHGAYDAaqCBYYCuDK3OjCYh5gGgwGqggGGAyanqTe3ukEAh5gHAwGqjoeAgP+CAgGBAIMYCQMBqo6JgID/ggQYAwCA/4EAgBgqgwGqjo+CJxgmGCVQJFAjQyI0Ojo4HReXmJkblxgXGBcYl7G3HrebMSIYorisKjo6sKOpshsguqmhIqCWN7qeuDK3OjCWN564Mrc6MJYxnqWpFzC5NhgFAwQVQyRnHoIBgQGkABgigRA7zVd5Q4PfTaT30l0Wie87hadHpDb5Gqz4yU+aTbKmBoEQgFOHvhLWkmCxG+/RHxO/ZIYw52O7FSygYzO1eBI47IQOEArSyGQwnMTtd1WIE6930h4loZ/VcmMpkz1bDErjmnEsecJIq3APr7DLw6Kxk6tYkSguJAWgAK0shmQQTzJRZJsF8463qxO/4EOxxXg0+rWfIdrg9fSnGiODwYQDGpM863ee2qBW7Q0Sg1ww2zivlfKEPXcNpNh487PmLcAK0shoFEtSLUtFUC1LMk5BV0g4TFAtMgA";
        this.oemPfxCert = "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";
        this.oemCert = "MIICqjCCAk+gAwIBAgIGAOjUpRBrMAoGCCqGSM49BAMCMEExCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExEjAQBgNVBAMMCU9lbVN1YkNhMjAeFw0yMDAxMTcwMDAwMDBaFw0zMDAxMTcyMzU5NTlaMEMxCzAJBgNVBAYTAktSMQ4wDAYDVQQKDAVwZW50YTEOMAwGA1UECwwFcGVudGExFDASBgNVBAMMC3Rlc3RfcGNpZDEwMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEjECS0GyLNS4aD+tgLFEZ3BN+DGUk3lgxk+Kroa4ehTEv4F5nQtlQfz07wW00f7F1CsXlp0guELMjgW84uXZMQaOCAS8wggErMGkGA1UdIwRiMGCAFKVNKkszWu4fudcrFzMGELxxVcaeoUWkQzBBMQswCQYDVQQGEwJLUjEOMAwGA1UECgwFcGVudGExDjAMBgNVBAsMBXBlbnRhMRIwEAYDVQQDDAlPRU1TdWJDYTGCAQswHQYDVR0OBBYEFP7ttGduNn1wbzB0rw2AbXkJJw7kMA4GA1UdDwEB/wQEAwID6DBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vMTI3LjAuMC4xL2NuPWRwX2U3TDJuby1sUTA2dTJKLVBVLTY1a1FwMCxvdT1wZW50YSxvPXBlbnRhLGM9S1IuY3JsMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovLzUyLjIzMS41NS44OjkwOTIwCgYIKoZIzj0EAwIDSQAwRgIhAMhcAkOEzNQY5zm3wwDqUgkm9andc36+k68vmko8WOqEAiEA8/JldokPHSOIHjm0IPQ4RWHmLR8xaIU1wckiBvPIwyA=";

        if(this.instResMsg == null)
            throw new Exception("Certificate Installation Response 가 존재하지 않습니다.");

        V2GMessage v2gMsg = null;
        //update 요청
        if(this.updtResMsg == null)
            v2gMsg = createCertUpdateReq(this.instResMsg);
        else
            v2gMsg = createCertUpdateReq2(this.updtResMsg);

        byte[] v2gMsgXml = MsgDigest.generateXMLToByteArray(v2gMsg, V2GMessage.class);

        return new String(v2gMsgXml);
    }

    public String getCertUpdtResMsg(String certUpdtReqV2gMsg) throws Exception {
        String encodedV2gMsgXml = Utils.base64Encode(ExiFactory.getInstance().encodeEXI(certUpdtReqV2gMsg.getBytes(), false, false));
        V2gMessage req = new V2gMessage(encodedV2gMsgXml);
        V2gMessage result = v2g.certUpdtMsgRequest(req);
        String resmsg = result.getV2gMessage();

        String decodedMsg = ExiFactory.getInstance().decodeEXI(resmsg, false, false);
        V2GMessage resV2gMsg = (V2GMessage) MsgDigest.unmarshallToMessage(decodedMsg.getBytes(), V2GMessage.class);
        JAXBElement<CertificateUpdateResType> certUpdtRes = (JAXBElement<CertificateUpdateResType>) resV2gMsg.getBody().getBodyElement();

        String resCode = certUpdtRes.getValue().getResponseCode();
        if(!resCode.equals("OK")) {
            throw new Exception("Fail to get certificate update response : "+resCode);
        }
        this.contractCert = Utils.base64Encode(certUpdtRes.getValue().getContractSignatureCertChain().getCertificate());
        this.updtResMsg = resmsg;

        return decodedMsg;
    }

    public void chargeService() throws Exception {
        //RA request
        System.out.println("1. Contract Certificate 검증");
        ContractVerifyRequest contVerifyRequest = new ContractVerifyRequest(this.emaid, getOcspReq(), ContractVerifyServiceCode.Charging);
        ContractVerifyResponse contVerifyResponse = this.mo.requestVerifContract(contVerifyRequest);
        if (contVerifyResponse == null) {
            throw new Exception("Contract verification Failure : "+ contVerifyRequest.toString());
        } else if (contVerifyResponse.getResult() == ResultCode.SUCCESS) {
            System.out.println("Contract Certificate 검증 성공");
        } else {
            throw new Exception("Contract Certificate 검증 실패");
        }

        System.out.println("2. Tariff");
//        GetTariffRequestData tariffRequest = new GetTariffRequestData(emaid, chargeType, tupleIdList, pmaxScheduleList);
        GetTariffRequestData tariffRequest = new GetTariffRequestData(emaid, "", new ArrayList<>(), new ArrayList<>());
        TariffResult tariffResponse =  this.mo.requestTariff(tariffRequest);

        if(tariffResponse.getTupleId()==null) {
            throw new Exception("Tariff 실패 "+ Json.instance().toJson(tariffResponse, true));
        } else {
            System.out.println("Tariff 성공");
        }


//        {"emaid":"","sessionId":"",
//        "evChargeEndMsg":
//        {"cpid":"1228",
//        "start_date":"Jan 16, 2020 5:05:33 PM",
//        "end_date":"Jan 16, 2020 6:34:44 PM",
//        "charge_type":"DC",
//        "charge_amount_total":"2.9000",
//        "charging_time":"5351",
//        "charge_price_total":2263,
//        "infra_price_total":"0.00",
//        "service_price_total":"0.00",
//        "tax_total":"225",
//        "payment_type":"card",
//        "charge_customer_num":"0000000000000000",
//        "charge_customer_name":"0",
//        "charging_state":"D�",
//        "membership_num":"0000000000000000",
//        "car_num":"0","car_num_info":"0",
//        "renewal_date":"Jan 16, 2020 6:34:44 PM",
//        "card_approval_num":"0",
//        "mileage_deduction":"null",
//        "outlet_num":"1",
//        "off_peak_amount":"0.9800",
//        "mid_peak_amount":"0.9400",
//        "on_peak_amount":"0.9800",
//        "off_peak_price":"836.7240",
//        "mid_peak_price":"802.5720",
//        "on_peak_price":"836.7240",
//        "charge_list_price":"0",
//        "charge_vat_price":"0",
//        "emaid":"KR-KEP-M42CISSFY-8","session_id":"DA6354C27404B714","schema_ver":"iso:15118:2:2014",
//        "first_metering_sign":"gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIKWZa1UpymqLZobhD6+lo7TQsanmyCG0225kJCOhZedVEoGT8q8dd/0GsVK2csyf12fvi2E1gPgUXBNjtK4/DDSzls/le7VkOuTlXcqtgo9J/+SCMPXoISHDQCuZBqFtl8/Gg8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaACjAA==",
//        "last_metering_sign":"gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIHh7lF8WMhIZcFYb9sAxk2whGf/58FKA4Hg5+9aFe+vLEoCriYDadlnX8Zpl6ApAUuihu02WxYMuvzeh1In3ojhklsu99FQpHunRe2GYN1go5RCEBPtuaCeCkpKzhiYi32K8g8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaA1BYwA=",
//        "ca_cert_cnt":"0",
//        "first_metering":"Invalid","last_metering":"Invalid",
//        "fee_compute":"[{\"time\":17,\"chargeMin\":11,\"chargeAmt\":\"2.900\",\"price\":\"190.8\",\"fee\":\"553.320\"},{\"time\":18,\"chargeMin\":34,\"chargeAmt\":\"8.964\",\"price\":\"190.8\",\"fee\":\"1710.262\"},{\"time\":\"total\",\"chargeMin\":45,\"chargeAmt\":0,\"fee\":2263.581818181818}]"
//        },
//        "subca2Cert":"","subca1Cert":""}


        System.out.println("3. Charge");
        EvChargeEndMsg evChargeEndMsg = new EvChargeEndMsg("TEST_CPID",
                new Date(System.currentTimeMillis() - (2*60*60*1000)),
                new Date(System.currentTimeMillis()),
                "DC",
                "2.9000",
                "5351",
                "2263",
                "0","0",
                "225",
                "card","0000000000000000",
                "0","완충",
                "0000000000000000",
                "0", "00가0000",null,
                "0","0","0",
                null, "0", "0", "0",
                "0", "0", "0",
                null,"0","0",null,
                this.emaid,this.sessionID, "iso:15118:2:2014",
                "gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIKWZa1UpymqLZobhD6+lo7TQsanmyCG0225kJCOhZedVEoGT8q8dd/0GsVK2csyf12fvi2E1gPgUXBNjtK4/DDSzls/le7VkOuTlXcqtgo9J/+SCMPXoISHDQCuZBqFtl8/Gg8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaACjAA==","gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIHh7lF8WMhIZcFYb9sAxk2whGf/58FKA4Hg5+9aFe+vLEoCriYDadlnX8Zpl6ApAUuihu02WxYMuvzeh1In3ojhklsu99FQpHunRe2GYN1go5RCEBPtuaCeCkpKzhiYi32K8g8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaA1BYwA=",null,
                "","0","");

        ChargeSalesRequest chargeRequest = new ChargeSalesRequest(emaid, "testSessionID", evChargeEndMsg, "", "", "", "");
        ChargeSalesResponse chargeResponse = this.mo.requestChargeSales(chargeRequest);
        if (chargeResponse == null) {
            throw new Exception("Charge 로그 기록 실패");
        }
        if (chargeResponse.getResult().getCode() == ResultCode.SUCCESS) {
            System.out.println("Charge 로그 기록 성공");
        } else {
            throw new Exception("Charge 로그 기록 실패 : " + chargeResponse.getResult().getMessage());
        }
    }

    public IssueOemProvCertRes issueOemProvCert(String pcid) throws Exception {
        IssueOemProvCertRes response = this.v2g.issueOemProvCert(pcid);
//        System.out.println(Json.instance().toJson(response, false));
        return response;
    }

    public IssueOemProvCertRes getOemProvCert(String pcid) throws Exception {
        IssueOemProvCertRes response = this.v2g.getOemProvCertByPcid(pcid);
//        System.out.println(Json.instance().toJson(response, false));
        return response;
    }

    public IssueCpoCertResponse issueCPOCert(String cn) throws Exception {
//        System.out.println(Json.instance().toJson(response, false));
        return this.v2g.issueCpoCertificate(cn);
    }

    public IssueCpoCertResponse getCPOCert(String cn) {
        return this.v2g.getCpoCertByCn(cn);
    }

    public void getCPOChain() throws Exception {
        ChainRes response = this.v2g.chainReq("V2G");
        response.getChain();
        String[] chainArray = response.getChain().split(",");
        for(String chain : chainArray) {
            System.out.println(chain);
    //      readPem(chain);
        }
//        System.out.println(Json.instance().toJson(response, false));
    }

    public String getEmaid() {
        return this.emaid;
    }

    public void chargeService_() throws Exception {
        // contractCert
        // moChain[]
        // certInstRes
        // oemCert/pfx

        // 1. check contractCert
        //1.1 if - contractCert is null : get install
        // 2. charge scenario
        // 2.1. contract cert ocsp
        // 2.1.1. if fail -> get update
        // 2.2.2. ocsp
        // 2.2. RA request

        if(this.contractCert == null) {
            System.out.println("Contract Certificate 가 비어 있습니다.\nCert installation message 를 요청합니다.");
            V2GMessage v2gMsg = createCertInstallReq();
            byte[] v2gMsgXml = MsgDigest.generateXMLToByteArray(v2gMsg, V2GMessage.class);
            System.out.println("======== Certificate Installation Request Message 생성 : ");
            System.out.println(new String(v2gMsgXml));
            String encodedV2gMsgXml = Utils.base64Encode(ExiFactory.getInstance().encodeEXI(v2gMsgXml, false, false));
//            System.out.println("======== Encoded Message: ");
//            System.out.println(encodedV2gMsgXml);

            // 2. certificateInstallResponse 요청
            V2gMessage req = new V2gMessage(encodedV2gMsgXml);
            com.pentasecurity.cpo.mo.model.V2gMessage result = v2g.certInstMsgRequest(req);
            String resmsg = result.getV2gMessage();

            // 3. certificateInstallResponse exi decoding/ print
            System.out.println("======== Certificate Installation Response 요청 : ");
            String decodedMsg = ExiFactory.getInstance().decodeEXI(resmsg, false, false);
            System.out.println(decodedMsg);

            // 4. contract cert 파싱
            V2GMessage resV2gMsg = (V2GMessage) MsgDigest.unmarshallToMessage(decodedMsg.getBytes(), V2GMessage.class);
            JAXBElement<CertificateInstallationResType> certInstRes = (JAXBElement<CertificateInstallationResType>) resV2gMsg.getBody().getBodyElement();

            this.emaid = certInstRes.getValue().getEMAID().getValue();
            this.contractCert = new String(Utils.base64Encode(certInstRes.getValue().getContractSignatureCertChain().getCertificate()));
            this.instResMsg = resmsg;

            System.out.println("======== Contract 정보 : ");
            System.out.println("EMAID : "+ this.emaid);
            System.out.println();
        }


        // ocsp
        String ocspResult = reqOcsp();
        System.out.println("======== OCSP 결과 : ");
        System.out.println("ocspResult");

        if(ocspResult.equals("REVOKED")) {
            V2GMessage v2gMsg = null;
            //update 요청
            if(this.updtResMsg == null)
                v2gMsg = createCertUpdateReq(this.instResMsg);
            else
                v2gMsg = createCertUpdateReq2(this.updtResMsg);

            byte[] v2gMsgXml = MsgDigest.generateXMLToByteArray(v2gMsg, V2GMessage.class);
            String v2gMsgXmlStr = new String(v2gMsgXml);

            System.out.println("Cert Update Request Message : ");
            System.out.println(v2gMsgXmlStr);

            String encodedV2gMsgXml = Utils.base64Encode(ExiFactory.getInstance().encodeEXI(v2gMsgXml, false, false));

            V2gMessage req = new V2gMessage(encodedV2gMsgXml);
            V2gMessage result = v2g.certUpdtMsgRequest(req);
            String resmsg = result.getV2gMessage();
            System.out.println("Cert Update Response Message: ");
            System.out.println(ExiFactory.getInstance().decodeEXI(resmsg, false, false));
            System.out.println();

        } else if(!ocspResult.equals("GOOD")) {
            throw new Exception("");
        }

        //RA request
        System.out.println("======== RA 연동 : ");
        System.out.println("1. Contract Certificate 검증");
        ContractVerifyRequest contVerifyRequest = new ContractVerifyRequest(this.emaid, getOcspReq(), ContractVerifyServiceCode.Charging);
        ContractVerifyResponse contVerifyResponse = this.mo.requestVerifContract(contVerifyRequest);
        if (contVerifyResponse == null) {
            throw new Exception("Contract verification Failure : "+ contVerifyRequest.toString());
        } else if (contVerifyResponse.getResult() == ResultCode.SUCCESS) {
            System.out.println("Contract Certificate 검증 성공");
        } else {
            throw new Exception("Contract Certificate 검증 실패");
        }

        System.out.println("2. Tariff 검증");
//        GetTariffRequestData tariffRequest = new GetTariffRequestData(emaid, chargeType, tupleIdList, pmaxScheduleList);
        GetTariffRequestData tariffRequest = new GetTariffRequestData(emaid, "", new ArrayList<>(), new ArrayList<>());
        TariffResult tariffResponse =  this.mo.requestTariff(tariffRequest);

        if(tariffResponse.getTupleId()==null) {
//            System.out.println("실패");
            throw new Exception("Tariff 검증 실패 "+ Json.instance().toJson(tariffResponse, true));
        } else {
            System.out.println("Tariff 검증 성공");
        }


//        {"emaid":"","sessionId":"",
//        "evChargeEndMsg":
//        {"cpid":"1228",
//        "start_date":"Jan 16, 2020 5:05:33 PM",
//        "end_date":"Jan 16, 2020 6:34:44 PM",
//        "charge_type":"DC",
//        "charge_amount_total":"2.9000",
//        "charging_time":"5351",
//        "charge_price_total":2263,
//        "infra_price_total":"0.00",
//        "service_price_total":"0.00",
//        "tax_total":"225",
//        "payment_type":"card",
//        "charge_customer_num":"0000000000000000",
//        "charge_customer_name":"0",
//        "charging_state":"D�",
//        "membership_num":"0000000000000000",
//        "car_num":"0","car_num_info":"0",
//        "renewal_date":"Jan 16, 2020 6:34:44 PM",
//        "card_approval_num":"0",
//        "mileage_deduction":"null",
//        "outlet_num":"1",
//        "off_peak_amount":"0.9800",
//        "mid_peak_amount":"0.9400",
//        "on_peak_amount":"0.9800",
//        "off_peak_price":"836.7240",
//        "mid_peak_price":"802.5720",
//        "on_peak_price":"836.7240",
//        "charge_list_price":"0",
//        "charge_vat_price":"0",
//        "emaid":"KR-KEP-M42CISSFY-8","session_id":"DA6354C27404B714","schema_ver":"iso:15118:2:2014",
//        "first_metering_sign":"gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIKWZa1UpymqLZobhD6+lo7TQsanmyCG0225kJCOhZedVEoGT8q8dd/0GsVK2csyf12fvi2E1gPgUXBNjtK4/DDSzls/le7VkOuTlXcqtgo9J/+SCMPXoISHDQCuZBqFtl8/Gg8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaACjAA==",
//        "last_metering_sign":"gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIHh7lF8WMhIZcFYb9sAxk2whGf/58FKA4Hg5+9aFe+vLEoCriYDadlnX8Zpl6ApAUuihu02WxYMuvzeh1In3ojhklsu99FQpHunRe2GYN1go5RCEBPtuaCeCkpKzhiYi32K8g8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaA1BYwA=",
//        "ca_cert_cnt":"0",
//        "first_metering":"Invalid","last_metering":"Invalid",
//        "fee_compute":"[{\"time\":17,\"chargeMin\":11,\"chargeAmt\":\"2.900\",\"price\":\"190.8\",\"fee\":\"553.320\"},{\"time\":18,\"chargeMin\":34,\"chargeAmt\":\"8.964\",\"price\":\"190.8\",\"fee\":\"1710.262\"},{\"time\":\"total\",\"chargeMin\":45,\"chargeAmt\":0,\"fee\":2263.581818181818}]"
//        },
//        "subca2Cert":"","subca1Cert":""}


        System.out.println("3. Charge 로그 기록");
        EvChargeEndMsg evChargeEndMsg = new EvChargeEndMsg("TEST_CPID",
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2019-05-05 13:00:00")
                ,new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2019-05-05 15:00:00"),
                "DC",
                "2.9000",
                "5351",
                "2263",
                "0","0",
                "225",
                "card","0000000000000000",
                "0","완충",
                "0000000000000000",
                "0", "00가0000",null,
                "0","0","0",
                null, "0", "0", "0",
                "0", "0", "0",
                null,"0","0",null,
                this.emaid,this.sessionID, "iso:15118:2:2014",
                "gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIKWZa1UpymqLZobhD6+lo7TQsanmyCG0225kJCOhZedVEoGT8q8dd/0GsVK2csyf12fvi2E1gPgUXBNjtK4/DDSzls/le7VkOuTlXcqtgo9J/+SCMPXoISHDQCuZBqFtl8/Gg8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaACjAA==","gJgCNpjVMJ0BLcUKiVodHRwOi8vd3d3LnczLm9yZy9UUi9jYW5vbmljYWwtZXhpL0NWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NkQMRtLIYgStDo6OB0Xl7u7u5c7mZc3uTOXqikXsbC3N7c0sbC2FrK8NJekKWh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NkIHh7lF8WMhIZcFYb9sAxk2whGf/58FKA4Hg5+9aFe+vLEoCriYDadlnX8Zpl6ApAUuihu02WxYMuvzeh1In3ojhklsu99FQpHunRe2GYN1go5RCEBPtuaCeCkpKzhiYi32K8g8BWlkMQI2mNUwnQEtxQgkiIJsZmpohmRuaGBohG5iaA1BYwA=",null,
                "","0","");

        ChargeSalesRequest chargeRequest = new ChargeSalesRequest(emaid, "testSessionID", evChargeEndMsg, "", "", "", "");
        ChargeSalesResponse chargeResponse = this.mo.requestChargeSales(chargeRequest);
        if (chargeResponse == null) {
            throw new Exception("Charge 로그 기록 실패");
        }
        if (chargeResponse.getResult().getCode() == ResultCode.SUCCESS) {
            System.out.println("Charge 로그 기록 성공");
        } else {
            throw new Exception("Charge 로그 기록 실패 : " + chargeResponse.getResult().getMessage());
        }
    }
}
